import * as testee from './index';

const a = testee;

const isNaN = (o: any) => o !== o;

const sets = [{
	name: 'boolean', tests: [
		{work: a.boolean, input: undefined, check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: undefined, check: (o: any) => !o},
		{work: a.boolean, input: null, check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: null, check: (o: any) => !o},
		{work: a.boolean, input: true, check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: true, check: (o: any) => o},
		{work: a.boolean, input: 2, check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: 2, check: (o: any) => o},
		{work: a.boolean, input: 2.5, check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: 2.5, check: (o: any) => o},
		{work: a.boolean, input: '3', check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: '3', check: (o: any) => o},
		{work: a.boolean, input: '3.5', check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: '3.5', check: (o: any) => o},
		{work: a.boolean, input: 'abc', check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: 'abc', check: (o: any) => o},
		{work: a.boolean, input: 4n, check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: 4n, check: (o: any) => o},
		{work: a.boolean, input: Symbol.for('123'), check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: Symbol.for('123'), check: (o: any) => o},
		{work: a.boolean, input: ['5.5'], check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: ['5.5'], check: (o: any) => o},
		{work: a.boolean, input: {6: 6}, check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: {6: 6}, check: (o: any) => o},
		{work: a.boolean, input: () => 7, check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: () => 7, check: (o: any) => o},
		{work: a.boolean, input: new Date(8), check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: new Date(8), check: (o: any) => o},
		{work: a.boolean, input: new Map, check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: new Map, check: (o: any) => o},
		{work: a.boolean, input: new WeakMap, check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: new WeakMap, check: (o: any) => o},
		{work: a.boolean, input: new Set, check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: new Set, check: (o: any) => o},
		{work: a.boolean, input: new WeakSet, check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: new WeakSet, check: (o: any) => o},
		{work: a.boolean, input: Promise.resolve(), check: (o: any) => typeof o === 'boolean'},
		{work: a.boolean, input: Promise.resolve(), check: (o: any) => o},
		{work: (i: any) => a.boolean(a.boolean(i)), input: true, check: (o: any) => o},
		{work: (i: any) => a.boolean(a.number(i)), input: true, check: (o: any) => o},
		{work: (i: any) => a.boolean(a.int(i)), input: true, check: (o: any) => o},
		{work: (i: any) => a.boolean(a.bigint(i)), input: true, check: (o: any) => o},
		{work: (i: any) => a.boolean(a.string(i)), input: true, check: (o: any) => o},
		{work: (i: any) => a.boolean(a.symbol(i)), input: true, check: (o: any) => o},
		{work: (i: any) => a.boolean(a.fn(i)), input: true, check: (o: any) => o},
		{work: (i: any) => a.boolean(a.date(i)), input: true, check: (o: any) => o},
		{work: (i: any) => a.boolean(a.array(i)), input: true, check: (o: any) => o},
		{work: (i: any) => a.boolean(a.map(i)), input: true, check: (o: any) => o},
		{work: (i: any) => a.boolean(a.weakmap(i)), input: true, check: (o: any) => o},
		{work: (i: any) => a.boolean(a.set(i)), input: true, check: (o: any) => o},
		{work: (i: any) => a.boolean(a.weakset(i)), input: true, check: (o: any) => o},
		{work: (i: any) => a.boolean(a.promise(i)), input: true, check: (o: any) => o},
	]
}, {
	name: 'number', tests: [
		{work: a.number, input: undefined, check: (o: any) => typeof o === 'number'},
		{work: a.number, input: undefined, check: (o: any) => isNaN(o)},
		{work: a.number, input: null, check: (o: any) => typeof o === 'number'},
		{work: a.number, input: null, check: (o: any) => isNaN(o)},
		{work: a.number, input: true, check: (o: any) => typeof o === 'number'},
		{work: a.number, input: true, check: (o: any) => o === 1},
		{work: a.number, input: 2, check: (o: any) => typeof o === 'number'},
		{work: a.number, input: 2, check: (o: any, i: any) => o === i},
		{work: a.number, input: 2.5, check: (o: any) => typeof o === 'number'},
		{work: a.number, input: 2.5, check: (o: any, i: any) => o === i},
		{work: a.number, input: '3', check: (o: any) => typeof o === 'number'},
		{work: a.number, input: '3', check: (o: any) => o === 3},
		{work: a.number, input: '3.5', check: (o: any) => typeof o === 'number'},
		{work: a.number, input: '3.5', check: (o: any) => o === 3.5},
		{work: a.number, input: 'abc', check: (o: any) => typeof o === 'number'},
		{work: a.number, input: 'abc', check: (o: any) => isNaN(o)},
		{work: a.number, input: 4n, check: (o: any) => typeof o === 'number'},
		{work: a.number, input: 4n, check: (o: any) => o === 4},
		{work: a.number, input: Symbol.for('123'), check: (o: any) => typeof o === 'number'},
		{work: a.number, input: Symbol.for('123'), check: (o: any) => o === 123},
		{work: a.number, input: Symbol.for('abc'), check: (o: any) => typeof o === 'number'},
		{work: a.number, input: Symbol.for('abc'), check: (o: any) => isNaN(o)},
		{work: a.number, input: [], check: (o: any) => typeof o === 'number'},
		{work: a.number, input: [], check: (o: any) => isNaN(o)},
		{work: a.number, input: ['5.5'], check: (o: any) => typeof o === 'number'},
		{work: a.number, input: ['5.5'], check: (o: any) => o === 5.5},
		{work: a.number, input: {6: 6}, check: (o: any) => typeof o === 'number'},
		{work: a.number, input: {6: 6}, check: (o: any) => isNaN(o)},
		{work: a.number, input: () => 7, check: (o: any) => typeof o === 'number'},
		{work: a.number, input: () => 7, check: (o: any) => isNaN(o)},
		{work: a.number, input: new Date(8), check: (o: any) => typeof o === 'number'},
		{work: a.number, input: new Date(8), check: (o: any) => o === 8},
		{work: a.number, input: new Map, check: (o: any) => typeof o === 'number'},
		{work: a.number, input: new Map, check: (o: any) => isNaN(o)},
		{work: a.number, input: new WeakMap, check: (o: any) => typeof o === 'number'},
		{work: a.number, input: new WeakMap, check: (o: any) => isNaN(o)},
		{work: a.number, input: new Set, check: (o: any) => typeof o === 'number'},
		{work: a.number, input: new Set, check: (o: any) => isNaN(o)},
		{work: a.number, input: new WeakSet, check: (o: any) => typeof o === 'number'},
		{work: a.number, input: new WeakSet, check: (o: any) => isNaN(o)},
		{work: a.number, input: Promise.resolve(), check: (o: any) => typeof o === 'number'},
		{work: a.number, input: Promise.resolve(), check: (o: any) => isNaN(o)},
		{work: (i: any) => a.number(a.boolean(i)), input: 42.5, check: (o: any) => o === 1},
		{work: (i: any) => a.number(a.number(i)), input: 42.5, check: (o: any) => o === 42.5},
		{work: (i: any) => a.number(a.int(i)), input: 42.5, check: (o: any) => o === 42},
		{work: (i: any) => a.number(a.bigint(i)), input: 42.5, check: (o: any) => o === 42},
		{work: (i: any) => a.number(a.string(i)), input: 42.5, check: (o: any) => o === 42.5},
		{work: (i: any) => a.number(a.symbol(i)), input: 42.5, check: (o: any) => o === 42.5},
		{work: (i: any) => a.number(a.fn(i)), input: 42.5, check: (o: any) => isNaN(o)},
		{work: (i: any) => a.number(a.date(i)), input: 42.5, check: (o: any) => o === 42},
		{work: (i: any) => a.number(a.array(i)), input: 42.5, check: (o: any) => o === 42.5},
		{work: (i: any) => a.number(a.map(i)), input: 42.5, check: (o: any) => isNaN(o)},
		{work: (i: any) => a.number(a.weakmap(i)), input: 42.5, check: (o: any) => isNaN(o)},
		{work: (i: any) => a.number(a.set(i)), input: 42.5, check: (o: any) => isNaN(o)},
		{work: (i: any) => a.number(a.weakset(i)), input: 42.5, check: (o: any) => isNaN(o)},
		{work: (i: any) => a.number(a.promise(i)), input: 42.5, check: (o: any) => isNaN(o)},
	]
}, {
	name: 'int', tests: [
		{work: a.int, input: undefined, check: (o: any) => typeof o === 'number'},
		{work: a.int, input: undefined, check: (o: any) => o === 0},
		{work: a.int, input: null, check: (o: any) => typeof o === 'number'},
		{work: a.int, input: null, check: (o: any) => o === 0},
		{work: a.int, input: true, check: (o: any) => typeof o === 'number'},
		{work: a.int, input: true, check: (o: any) => o === 1},
		{work: a.int, input: 2, check: (o: any) => typeof o === 'number'},
		{work: a.int, input: 2, check: (o: any, i: any) => o === i},
		{work: a.int, input: 2.5, check: (o: any) => typeof o === 'number'},
		{work: a.int, input: 2.5, check: (o: any) => o === 2},
		{work: a.int, input: '3', check: (o: any) => typeof o === 'number'},
		{work: a.int, input: '3', check: (o: any) => o === 3},
		{work: a.int, input: '3.5', check: (o: any) => typeof o === 'number'},
		{work: a.int, input: '3.5', check: (o: any) => o === 3},
		{work: a.int, input: 'abc', check: (o: any) => typeof o === 'number'},
		{work: a.int, input: 'abc', check: (o: any) => o === 0},
		{work: a.int, input: 4n, check: (o: any) => typeof o === 'number'},
		{work: a.int, input: 4n, check: (o: any) => o === 4},
		{work: a.int, input: Symbol.for('123'), check: (o: any) => typeof o === 'number'},
		{work: a.int, input: Symbol.for('123'), check: (o: any) => o === 123},
		{work: a.int, input: Symbol.for('abc'), check: (o: any) => typeof o === 'number'},
		{work: a.int, input: Symbol.for('abc'), check: (o: any) => o === 0},
		{work: a.int, input: [], check: (o: any) => typeof o === 'number'},
		{work: a.int, input: [], check: (o: any) => o === 0},
		{work: a.int, input: ['5.5'], check: (o: any) => typeof o === 'number'},
		{work: a.int, input: ['5.5'], check: (o: any) => o === 5},
		{work: a.int, input: {6: 6}, check: (o: any) => typeof o === 'number'},
		{work: a.int, input: {6: 6}, check: (o: any) => o === 0},
		{work: a.int, input: () => 7, check: (o: any) => typeof o === 'number'},
		{work: a.int, input: () => 7, check: (o: any) => o === 0},
		{work: a.int, input: new Date(8), check: (o: any) => typeof o === 'number'},
		{work: a.int, input: new Date(8), check: (o: any) => o === 8},
		{work: a.int, input: new Map, check: (o: any) => typeof o === 'number'},
		{work: a.int, input: new Map, check: (o: any) => o === 0},
		{work: a.int, input: new WeakMap, check: (o: any) => typeof o === 'number'},
		{work: a.int, input: new WeakMap, check: (o: any) => o === 0},
		{work: a.int, input: new Set, check: (o: any) => typeof o === 'number'},
		{work: a.int, input: new Set, check: (o: any) => o === 0},
		{work: a.int, input: new WeakSet, check: (o: any) => typeof o === 'number'},
		{work: a.int, input: new WeakSet, check: (o: any) => o === 0},
		{work: a.int, input: Promise.resolve(), check: (o: any) => typeof o === 'number'},
		{work: a.int, input: Promise.resolve(), check: (o: any) => o === 0},
		{work: (i: any) => a.number(a.boolean(i)), input: 42, check: (o: any) => o === 1},
		{work: (i: any) => a.number(a.number(i)), input: 42, check: (o: any) => o === 42},
		{work: (i: any) => a.number(a.int(i)), input: 42, check: (o: any) => o === 42},
		{work: (i: any) => a.number(a.bigint(i)), input: 42, check: (o: any) => o === 42},
		{work: (i: any) => a.number(a.string(i)), input: 42, check: (o: any) => o === 42},
		{work: (i: any) => a.number(a.symbol(i)), input: 42, check: (o: any) => o === 42},
		{work: (i: any) => a.number(a.fn(i)), input: 42, check: (o: any) => isNaN(o)},
		{work: (i: any) => a.number(a.date(i)), input: 42, check: (o: any) => o === 42},
		{work: (i: any) => a.number(a.array(i)), input: 42, check: (o: any) => o === 42},
		{work: (i: any) => a.number(a.map(i)), input: 42, check: (o: any) => isNaN(o)},
		{work: (i: any) => a.number(a.weakmap(i)), input: 42, check: (o: any) => isNaN(o)},
		{work: (i: any) => a.number(a.set(i)), input: 42, check: (o: any) => isNaN(o)},
		{work: (i: any) => a.number(a.weakset(i)), input: 42, check: (o: any) => isNaN(o)},
		{work: (i: any) => a.number(a.promise(i)), input: 42, check: (o: any) => isNaN(o)},
	]
}, {
	name: 'bigint', tests: [
		{work: a.bigint, input: undefined, check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: undefined, check: (o: any) => o === 0n},
		{work: a.bigint, input: null, check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: null, check: (o: any) => o === 0n},
		{work: a.bigint, input: true, check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: true, check: (o: any) => o === 1n},
		{work: a.bigint, input: NaN, check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: NaN, check: (o: any) => o === 0n},
		{work: a.bigint, input: 2, check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: 2, check: (o: any) => o === 2n},
		{work: a.bigint, input: 2.5, check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: 2.5, check: (o: any) => o === 2n},
		{work: a.bigint, input: '3', check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: '3', check: (o: any) => o === 3n},
		{work: a.bigint, input: '3.5', check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: '3.5', check: (o: any) => o === 0n},
		{work: a.bigint, input: 'abc', check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: 'abc', check: (o: any) => o === 0n},
		{work: a.bigint, input: 4n, check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: 4n, check: (o: any, i: any) => o === i},
		{work: a.bigint, input: Symbol.for('123'), check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: Symbol.for('123'), check: (o: any) => o === 123n},
		{work: a.bigint, input: Symbol.for('abc'), check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: Symbol.for('abc'), check: (o: any) => o === 0n},
		{work: a.bigint, input: [], check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: [], check: (o: any) => o === 0n},
		{work: a.bigint, input: [5], check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: [5], check: (o: any) => o === 5n},
		{work: a.bigint, input: ['5'], check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: ['5'], check: (o: any) => o === 5n},
		{work: a.bigint, input: {6: 6}, check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: {6: 6}, check: (o: any) => o === 0n},
		{work: a.bigint, input: () => 7, check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: () => 7, check: (o: any) => o === 0n},
		{work: a.bigint, input: new Date(8), check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: new Date(8), check: (o: any) => o === 8n},
		{work: a.bigint, input: new Map, check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: new Map, check: (o: any) => o === 0n},
		{work: a.bigint, input: new WeakMap, check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: new WeakMap, check: (o: any) => o === 0n},
		{work: a.bigint, input: new Set, check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: new Set, check: (o: any) => o === 0n},
		{work: a.bigint, input: new WeakSet, check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: new WeakSet, check: (o: any) => o === 0n},
		{work: a.bigint, input: Promise.resolve(), check: (o: any) => typeof o === 'bigint'},
		{work: a.bigint, input: Promise.resolve(), check: (o: any) => o === 0n},
		{work: (i: any) => a.bigint(a.boolean(i)), input: 42n, check: (o: any) => o === 1n},
		{work: (i: any) => a.bigint(a.number(i)), input: 42n, check: (o: any) => o === 42n},
		{work: (i: any) => a.bigint(a.int(i)), input: 42n, check: (o: any) => o === 42n},
		{work: (i: any) => a.bigint(a.bigint(i)), input: 42n, check: (o: any) => o === 42n},
		{work: (i: any) => a.bigint(a.string(i)), input: 42n, check: (o: any) => o === 42n},
		{work: (i: any) => a.bigint(a.symbol(i)), input: 42n, check: (o: any) => o === 42n},
		{work: (i: any) => a.bigint(a.fn(i)), input: 42n, check: (o: any) => o === 0n},
		{work: (i: any) => a.bigint(a.date(i)), input: 42n, check: (o: any) => o === 42n},
		{work: (i: any) => a.bigint(a.array(i)), input: 42n, check: (o: any) => o === 42n},
		{work: (i: any) => a.bigint(a.map(i)), input: 42n, check: (o: any) => o === 0n},
		{work: (i: any) => a.bigint(a.weakmap(i)), input: 42n, check: (o: any) => o === 0n},
		{work: (i: any) => a.bigint(a.set(i)), input: 42n, check: (o: any) => o === 0n},
		{work: (i: any) => a.bigint(a.weakset(i)), input: 42n, check: (o: any) => o === 0n},
		{work: (i: any) => a.bigint(a.promise(i)), input: 42n, check: (o: any) => o === 0n},
	]
}, {
	name: 'string', tests: [
		{work: a.string, input: undefined, check: (o: any) => typeof o === 'string'},
		{work: a.string, input: undefined, check: (o: any) => o === ''},
		{work: a.string, input: null, check: (o: any) => typeof o === 'string'},
		{work: a.string, input: null, check: (o: any) => o === ''},
		{work: a.string, input: true, check: (o: any) => typeof o === 'string'},
		{work: a.string, input: true, check: (o: any) => o === ' '},
		{work: a.string, input: 2, check: (o: any) => typeof o === 'string'},
		{work: a.string, input: 2, check: (o: any) => o === '2'},
		{work: a.string, input: 2.5, check: (o: any) => typeof o === 'string'},
		{work: a.string, input: 2.5, check: (o: any) => o === '2.5'},
		{work: a.string, input: '3', check: (o: any) => typeof o === 'string'},
		{work: a.string, input: '3', check: (o: any) => o === '3'},
		{work: a.string, input: '3.5', check: (o: any) => typeof o === 'string'},
		{work: a.string, input: '3.5', check: (o: any) => o === '3.5'},
		{work: a.string, input: 'abc', check: (o: any) => typeof o === 'string'},
		{work: a.string, input: 'abc', check: (o: any, i: any) => o === i},
		{work: a.string, input: 4n, check: (o: any) => typeof o === 'string'},
		{work: a.string, input: 4n, check: (o: any) => o === '4'},
		{work: a.string, input: Symbol.for('123'), check: (o: any) => typeof o === 'string'},
		{work: a.string, input: Symbol.for('123'), check: (o: any) => o === '123'},
		{work: a.string, input: [], check: (o: any) => typeof o === 'string'},
		{work: a.string, input: [], check: (o: any) => o === ''},
		{work: a.string, input: ['5.5'], check: (o: any) => typeof o === 'string'},
		{work: a.string, input: ['5.5'], check: (o: any) => o === '5.5'},
		{work: a.string, input: ['5.5', '6'], check: (o: any) => typeof o === 'string'},
		{work: a.string, input: ['5.5', '6'], check: (o: any) => o === '5.5'},
		{work: a.string, input: {6: 6}, check: (o: any) => typeof o === 'string'},
		{work: a.string, input: {6: 6}, check: (o: any) => o === '[object Object]'},
		{work: a.string, input: () => 7, check: (o: any) => typeof o === 'string'},
		{work: a.string, input: () => 7, check: (o: any) => o === '() => 7'},
		{work: a.string, input: new Date(8), check: (o: any) => typeof o === 'string'},
		{work: a.string, input: new Date(8), check: (o: any) => o === '1970-01-01T00:00:00.008Z'},
		{work: a.string, input: new Map, check: (o: any) => typeof o === 'string'},
		{work: a.string, input: new Map, check: (o: any) => o === '[object Map]'},
		{work: a.string, input: new WeakMap, check: (o: any) => typeof o === 'string'},
		{work: a.string, input: new WeakMap, check: (o: any) => o === '[object WeakMap]'},
		{work: a.string, input: new Set, check: (o: any) => typeof o === 'string'},
		{work: a.string, input: new Set, check: (o: any) => o === '[object Set]'},
		{work: a.string, input: new WeakSet, check: (o: any) => typeof o === 'string'},
		{work: a.string, input: new WeakSet, check: (o: any) => o === '[object WeakSet]'},
		{work: a.string, input: Promise.resolve(), check: (o: any) => typeof o === 'string'},
		{work: a.string, input: Promise.resolve(), check: (o: any) => o === '[object Promise]'},
		{work: (i: any) => a.string(a.boolean(i)), input: 'boolean', check: (o: any) => o === ' '},
		{work: (i: any) => a.string(a.number(i)), input: 'number', check: (o: any) => o === ''},
		{work: (i: any) => a.string(a.int(i)), input: 'int', check: (o: any) => o === '0'},
		{work: (i: any) => a.string(a.bigint(i)), input: 'bigint', check: (o: any) => o === '0'},
		{work: (i: any) => a.string(a.string(i)), input: 'string', check: (o: any) => o === 'string'},
		{work: (i: any) => a.string(a.symbol(i)), input: 'symbol', check: (o: any) => o === 'symbol'},
		{work: (i: any) => a.string(a.fn(i)()), input: 'fn', check: (o: any, i: any) => o === i},
		{work: (i: any) => a.string(a.date(i)), input: '2020-01-01T01:01:01.000Z', check: (o: any, i: any) => o === i},
		{work: (i: any) => a.string(a.array(i)), input: 'array', check: (o: any) => o === 'array'},
		{work: (i: any) => a.string(a.map(i)), input: 'map', check: (o: any) => o === '[object Map]'},
		{work: (i: any) => a.string(a.weakmap(i)), input: 'weakmap', check: (o: any) => o === '[object WeakMap]'},
		{work: (i: any) => a.string(a.set(i)), input: 'set', check: (o: any) => o === '[object Set]'},
		{work: (i: any) => a.string(a.weakset(i)), input: 'weakset', check: (o: any) => o === '[object WeakSet]'},
		{work: (i: any) => a.string(a.promise(i)), input: 'promise', check: (o: any) => o === '[object Promise]'},
	]
}, {
	name: 'symbol', tests: [
		{work: a.symbol, input: undefined, check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: undefined, check: (o: any) => o === Symbol.for('')},
		{work: a.symbol, input: null, check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: null, check: (o: any) => o === Symbol.for('')},
		{work: a.symbol, input: true, check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: true, check: (o: any) => o === Symbol.for(' ')},
		{work: a.symbol, input: NaN, check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: NaN, check: (o: any) => o === Symbol.for('')},
		{work: a.symbol, input: 2, check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: 2, check: (o: any) => o === Symbol.for('2')},
		{work: a.symbol, input: 2.5, check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: 2.5, check: (o: any) => o === Symbol.for('2.5')},
		{work: a.symbol, input: '3', check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: '3', check: (o: any) => o === Symbol.for('3')},
		{work: a.symbol, input: '3.5', check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: '3.5', check: (o: any) => o === Symbol.for('3.5')},
		{work: a.symbol, input: 'abc', check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: 'abc', check: (o: any) => o === Symbol.for('abc')},
		{work: a.symbol, input: 4n, check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: 4n, check: (o: any) => o === Symbol.for('4')},
		{work: a.symbol, input: Symbol.for('123'), check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: Symbol.for('123'), check: (o: any, i: any) => o === i},
		{work: a.symbol, input: [], check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: [], check: (o: any) => o === Symbol.for('')},
		{work: a.symbol, input: ['5.5'], check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: ['5.5'], check: (o: any) => o === Symbol.for('5.5')},
		{work: a.symbol, input: ['5.5', '6'], check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: ['5.5', '6'], check: (o: any) => o === Symbol.for('5.5')},
		{work: a.symbol, input: {6: 6}, check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: {6: 6}, check: (o: any) => o === Symbol.for('[object Object]')},
		{work: a.symbol, input: () => 7, check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: () => 7, check: (o: any) => o === Symbol.for('() => 7')},
		{work: a.symbol, input: new Date(8), check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: new Date(8), check: (o: any) => o === Symbol.for('1970-01-01T00:00:00.008Z')},
		{work: a.symbol, input: new Map, check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: new Map, check: (o: any) => o === Symbol.for('[object Map]')},
		{work: a.symbol, input: new WeakMap, check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: new WeakMap, check: (o: any) => o === Symbol.for('[object WeakMap]')},
		{work: a.symbol, input: new Set, check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: new Set, check: (o: any) => o === Symbol.for('[object Set]')},
		{work: a.symbol, input: new WeakSet, check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: new WeakSet, check: (o: any) => o === Symbol.for('[object WeakSet]')},
		{work: a.symbol, input: Promise.resolve(), check: (o: any) => typeof o === 'symbol'},
		{work: a.symbol, input: Promise.resolve(), check: (o: any) => o === Symbol.for('[object Promise]')},
		{work: (i: any) => a.symbol(a.boolean(i)), input: Symbol.for(' '), check: (o: any) => o === Symbol.for(' ')},
		{work: (i: any) => a.symbol(a.number(i)), input: Symbol.for('24.5'), check: (o: any, i: any) => o === i},
		{work: (i: any) => a.symbol(a.int(i)), input: Symbol.for('25.5'), check: (o: any) => o === Symbol.for('25')},
		{work: (i: any) => a.symbol(a.bigint(i)), input: Symbol.for('42'), check: (o: any, i: any) => o === i},
		{work: (i: any) => a.symbol(a.string(i)), input: Symbol.for('string'), check: (o: any, i: any) => o === i},
		{work: (i: any) => a.symbol(a.symbol(i)), input: Symbol.for('symbol'), check: (o: any, i: any) => o === i},
		{
			work: (i: any) => a.symbol(a.date(i)),
			input: Symbol.for('2020-01-01T01:01:01.000Z'),
			check: (o: any, i: any) => o === i
		},
		{work: (i: any) => a.symbol(a.array(i)), input: Symbol.for('array'), check: (o: any, i: any) => o === i},
		{
			work: (i: any) => a.symbol(a.map(i)),
			input: Symbol.for('Map'),
			check: (o: any) => o === Symbol.for('[object Map]')
		},
		{
			work: (i: any) => a.symbol(a.weakmap(i)),
			input: Symbol.for('WeakMap'),
			check: (o: any) => o === Symbol.for('[object WeakMap]')
		},
		{
			work: (i: any) => a.symbol(a.set(i)),
			input: Symbol.for('Set'),
			check: (o: any) => o === Symbol.for('[object Set]')
		},
		{
			work: (i: any) => a.symbol(a.weakset(i)),
			input: Symbol.for('WeakSet'),
			check: (o: any) => o === Symbol.for('[object WeakSet]')
		},
		{
			work: (i: any) => a.symbol(a.promise(i)),
			input: Symbol.for('Promise'),
			check: (o: any) => o === Symbol.for('[object Promise]')
		},
	]
}, {
	name: 'fn', tests: [
		{work: a.fn, input: undefined, check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: undefined, check: (o: any, i: any) => o() === i},
		{work: a.fn, input: null, check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: null, check: (o: any, i: any) => o() === i},
		{work: a.fn, input: true, check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: true, check: (o: any, i: any) => o() === i},
		{work: a.fn, input: 2, check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: 2, check: (o: any, i: any) => o() === i},
		{work: a.fn, input: 2.5, check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: 2.5, check: (o: any, i: any) => o() === i},
		{work: a.fn, input: '3', check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: '3', check: (o: any, i: any) => o() === i},
		{work: a.fn, input: '3.5', check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: '3.5', check: (o: any, i: any) => o() === i},
		{work: a.fn, input: 'abc', check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: 'abc', check: (o: any, i: any) => o() === i},
		{work: a.fn, input: 4n, check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: 4n, check: (o: any, i: any) => o() === i},
		{work: a.fn, input: Symbol.for('123'), check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: Symbol.for('123'), check: (o: any, i: any) => o() === i},
		{work: a.fn, input: [], check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: [], check: (o: any, i: any) => o() === i},
		{work: a.fn, input: ['5.5'], check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: ['5.5'], check: (o: any, i: any) => o() === i},
		{work: a.fn, input: ['5.5', '6'], check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: ['5.5', '6'], check: (o: any, i: any) => o() === i},
		{work: a.fn, input: {6: 6}, check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: {6: 6}, check: (o: any, i: any) => o() === i},
		{work: a.fn, input: () => 7, check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: () => 7, check: (o: any, i: any) => o === i},
		{work: a.fn, input: new Date(8), check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: new Date(8), check: (o: any, i: any) => o() === i},
		{work: a.fn, input: new Map, check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: new Map, check: (o: any, i: any) => o() === i},
		{work: a.fn, input: new WeakMap, check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: new WeakMap, check: (o: any, i: any) => o() === i},
		{work: a.fn, input: new Set, check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: new Set, check: (o: any, i: any) => o() === i},
		{work: a.fn, input: new WeakSet, check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: new WeakSet, check: (o: any, i: any) => o() === i},
		{work: a.fn, input: Promise.resolve(), check: (o: any) => typeof o === 'function'},
		{work: a.fn, input: Promise.resolve(), check: (o: any, i: any) => o() === i},
	]
}, {
	name: 'date', tests: [
		{work: a.date, input: undefined, check: (o: any) => o instanceof Date},
		{work: a.date, input: undefined, check: (o: any) => isNaN(o.getTime())},
		{work: a.date, input: null, check: (o: any) => o instanceof Date},
		{work: a.date, input: null, check: (o: any) => isNaN(o.getTime())},
		{work: a.date, input: true, check: (o: any) => o instanceof Date},
		{work: a.date, input: true, check: (o: any) => o.getTime() === 1},
		{work: a.date, input: 2, check: (o: any) => o instanceof Date},
		{work: a.date, input: 2, check: (o: any) => o.getTime() === 2},
		{work: a.date, input: 2.5, check: (o: any) => o instanceof Date},
		{work: a.date, input: 2.5, check: (o: any) => o.getTime() === 2},
		{work: a.date, input: '3', check: (o: any) => o instanceof Date},
		{work: a.date, input: '3', check: (o: any) => o.getTime() === 983397600000},
		{work: a.date, input: '3.5', check: (o: any) => o instanceof Date},
		{work: a.date, input: '3.5', check: (o: any) => o.getTime() === 983743200000},
		{work: a.date, input: 'abc', check: (o: any) => o instanceof Date},
		{work: a.date, input: 'abc', check: (o: any) => isNaN(o.getTime())},
		{work: a.date, input: 4n, check: (o: any) => o instanceof Date},
		{work: a.date, input: 4n, check: (o: any) => o.getTime() === 4},
		{work: a.date, input: Symbol.for('abc'), check: (o: any) => o instanceof Date},
		{work: a.date, input: Symbol.for('abc'), check: (o: any) => isNaN(o.getTime())},
		{work: a.date, input: [], check: (o: any) => o instanceof Date},
		{work: a.date, input: [], check: (o: any) => isNaN(o.getTime())},
		{work: a.date, input: ['5.5'], check: (o: any) => o instanceof Date},
		{work: a.date, input: ['5.5'], check: (o: any) => isNaN(o.getTime())},
		{work: a.date, input: ['5.5', '6'], check: (o: any) => o instanceof Date},
		{work: a.date, input: ['5.5', '6'], check: (o: any) => isNaN(o.getTime())},
		{work: a.date, input: {6: 6}, check: (o: any) => o instanceof Date},
		{work: a.date, input: {6: 6}, check: (o: any) => isNaN(o.getTime())},
		{work: a.date, input: () => 7, check: (o: any) => o instanceof Date},
		{work: a.date, input: () => 7, check: (o: any) => isNaN(o.getTime())},
		{work: a.date, input: new Date(8), check: (o: any) => o instanceof Date},
		{work: a.date, input: new Date(8), check: (o: any, i: any) => o === i},
		{work: a.date, input: new Map, check: (o: any) => o instanceof Date},
		{work: a.date, input: new Map, check: (o: any) => isNaN(o.getTime())},
		{work: a.date, input: new WeakMap, check: (o: any) => o instanceof Date},
		{work: a.date, input: new WeakMap, check: (o: any) => isNaN(o.getTime())},
		{work: a.date, input: new Set, check: (o: any) => o instanceof Date},
		{work: a.date, input: new Set, check: (o: any) => isNaN(o.getTime())},
		{work: a.date, input: new WeakSet, check: (o: any) => o instanceof Date},
		{work: a.date, input: new WeakSet, check: (o: any) => isNaN(o.getTime())},
		{work: a.date, input: Promise.resolve(), check: (o: any) => o instanceof Date},
		{work: a.date, input: Promise.resolve(), check: (o: any) => isNaN(o.getTime())},
		{
			work: (i: any) => a.date(a.boolean(i)),
			input: new Date('1970-01-01T00:00:01.000Z'),
			check: (o: any) => o.getTime() === 1
		},
		{
			work: (i: any) => a.date(a.number(i)),
			input: new Date('1970-01-01T00:00:02.000Z'),
			check: (o: any) => o.getTime() === 2000
		},
		{
			work: (i: any) => a.date(a.int(i)),
			input: new Date('1970-01-01T00:00:03.000Z'),
			check: (o: any) => o.getTime() === 3000
		},
		{
			work: (i: any) => a.date(a.bigint(i)),
			input: new Date('1970-01-01T00:00:04.000Z'),
			check: (o: any) => o.getTime() === 4000
		},
		{
			work: (i: any) => a.date(a.string(i)),
			input: new Date('1970-01-01T00:00:05.000Z'),
			check: (o: any) => o.getTime() === 5000
		},
		{
			work: (i: any) => a.date(a.symbol(i)),
			input: new Date('1970-01-01T00:00:06.000Z'),
			check: (o: any) => o.getTime() === 6000
		},
		{
			work: (i: any) => a.date(a.fn(i)),
			input: new Date('1970-01-01T00:00:07.000Z'),
			check: (o: any) => isNaN(o.getTime())
		},
		{
			work: (i: any) => a.date(a.date(i)),
			input: new Date('1970-01-01T00:00:08.000Z'),
			check: (o: any) => o.getTime() === 8000
		},
		{
			work: (i: any) => a.date(a.array(i)),
			input: new Date('1970-01-01T00:00:09.000Z'),
			check: (o: any) => isNaN(o.getTime())
		},
		{
			work: (i: any) => a.date(a.map(i)),
			input: new Date('1970-01-01T00:00:10.000Z'),
			check: (o: any) => isNaN(o.getTime())
		},
		{
			work: (i: any) => a.date(a.weakmap(i)),
			input: new Date('1970-01-01T00:00:11.000Z'),
			check: (o: any) => isNaN(o.getTime())
		},
		{
			work: (i: any) => a.date(a.set(i)),
			input: new Date('1970-01-01T00:00:12.000Z'),
			check: (o: any) => isNaN(o.getTime())
		},
		{
			work: (i: any) => a.date(a.weakset(i)),
			input: new Date('1970-01-01T00:00:13.000Z'),
			check: (o: any) => isNaN(o.getTime())
		},
		{
			work: (i: any) => a.date(a.promise(i)),
			input: new Date('1970-01-01T00:00:14.000Z'),
			check: (o: any) => isNaN(o.getTime())
		},
	]
}, {
	name: 'array', tests: [
		{work: a.array, input: undefined, check: Array.isArray},
		{work: a.array, input: undefined, check: (o: any) => o.length === 0},
		{work: a.array, input: null, check: Array.isArray},
		{work: a.array, input: null, check: (o: any, i: any) => o[0] === i},
		{work: a.array, input: true, check: Array.isArray},
		{work: a.array, input: true, check: (o: any, i: any) => o[0] === i},
		{work: a.array, input: 2, check: Array.isArray},
		{work: a.array, input: 2, check: (o: any, i: any) => o[0] === i},
		{work: a.array, input: 2.5, check: Array.isArray},
		{work: a.array, input: 2.5, check: (o: any, i: any) => o[0] === i},
		{work: a.array, input: '3', check: Array.isArray},
		{work: a.array, input: '3', check: (o: any, i: any) => o[0] === i},
		{work: a.array, input: '3.5', check: Array.isArray},
		{work: a.array, input: '3.5', check: (o: any, i: any) => o[0] === i},
		{work: a.array, input: 'abc', check: Array.isArray},
		{work: a.array, input: 'abc', check: (o: any, i: any) => o[0] === i},
		{work: a.array, input: 4n, check: Array.isArray},
		{work: a.array, input: 4n, check: (o: any, i: any) => o[0] === i},
		{work: a.array, input: Symbol.for('123'), check: Array.isArray},
		{work: a.array, input: Symbol.for('123'), check: (o: any, i: any) => o[0] === i},
		{work: a.array, input: [], check: Array.isArray},
		{work: a.array, input: [], check: (o: any, i: any) => o === i},
		{work: a.array, input: ['5.5'], check: Array.isArray},
		{work: a.array, input: ['5.5'], check: (o: any, i: any) => o === i},
		{work: a.array, input: ['5.5', '6'], check: Array.isArray},
		{work: a.array, input: ['5.5', '6'], check: (o: any, i: any) => o === i},
		{work: a.array, input: {6: 6}, check: Array.isArray},
		{work: a.array, input: {6: 6}, check: (o: any, i: any) => o[0] === i},
		{work: a.array, input: () => 7, check: Array.isArray},
		{work: a.array, input: () => 7, check: (o: any, i: any) => o[0] === i},
		{work: a.array, input: new Date(8), check: Array.isArray},
		{work: a.array, input: new Date(8), check: (o: any, i: any) => o[0] === i},
		{work: a.array, input: new Map, check: Array.isArray},
		{work: a.array, input: new Map([[1, 2]]), check: (o: any) => o[0][1] === 2},
		{work: a.array, input: new WeakMap, check: Array.isArray},
		{work: a.array, input: new WeakMap, check: (o: any, i: any) => o[0] === i},
		{work: a.array, input: new Set, check: Array.isArray},
		{work: a.array, input: new Set([1, 2]), check: (o: any) => o.length === 2},
		{work: a.array, input: new WeakSet, check: Array.isArray},
		{work: a.array, input: new WeakSet, check: (o: any, i: any) => o[0] === i},
		{work: a.array, input: Promise.resolve(), check: Array.isArray},
		{work: a.array, input: Promise.resolve(), check: (o: any, i: any) => o[0] === i},
		{work: (i: any) => a.array(a.boolean(i)), input: [0, 10, 20], check: (o: any) => o.length === 1},
		{work: (i: any) => a.array(a.number(i)), input: [1, 11, 21], check: (o: any) => o.length === 1},
		{work: (i: any) => a.array(a.int(i)), input: [2, 12, 22], check: (o: any) => o.length === 1},
		{work: (i: any) => a.array(a.bigint(i)), input: [3, 13, 23], check: (o: any) => o.length === 1},
		{work: (i: any) => a.array(a.string(i)), input: [4, 14, 24], check: (o: any, i: any) => o[0] === String(i[0])},
		{work: (i: any) => a.array(a.symbol(i)), input: [5, 15, 25], check: (o: any) => o.length === 1},
		{work: (i: any) => a.array(a.fn(i)), input: [6, 16, 26], check: (o: any) => o.length === 1},
		{work: (i: any) => a.array(a.date(i)), input: [7, 17, 27], check: (o: any) => o.length === 1},
		{work: (i: any) => a.array(a.array(i)), input: [8, 18, 28], check: (o: any) => o.length === 3},
		{work: (i: any) => a.array(a.map(i)), input: [9, 19, 29], check: (o: any) => o.length === 0},
		{work: (i: any) => a.array(a.weakmap(i)), input: [10, 110, 210], check: (o: any) => o.length === 1},
		{work: (i: any) => a.array(a.set(i)), input: [11, 111, 211], check: (o: any) => o.length === 3},
		{work: (i: any) => a.array(a.weakset(i)), input: [12, 112, 212], check: (o: any) => o.length === 1},
		{work: (i: any) => a.array(a.promise(i)), input: [13, 113, 213], check: (o: any) => o.length === 1},
	]
}, {
	name: 'map', tests: [
		{work: a.map, input: undefined, check: (o: any) => o instanceof Map},
		{work: a.map, input: undefined, check: (o: any) => o.size === 0},
		{work: a.map, input: null, check: (o: any) => o instanceof Map},
		{work: a.map, input: null, check: (o: any) => o.size === 0},
		{work: a.map, input: 2, check: (o: any) => o instanceof Map},
		{work: a.map, input: 2, check: (o: any) => o.size === 0},
		{work: a.map, input: [3], check: (o: any) => o instanceof Map},
		{work: a.map, input: [3], check: (o: any) => o.size === 0},
		{work: a.map, input: [[3, 3]], check: (o: any) => o instanceof Map},
		{work: a.map, input: [[3, 3]], check: (o: any) => o.has(3)},
		{work: a.map, input: new Map, check: (o: any) => o instanceof Map},
		{work: a.map, input: new Map, check: (o: any, i: any) => (o === i)},
	]
}, {
	name: 'weakmap', tests: [
		{work: a.weakmap, input: undefined, check: (o: any) => o instanceof WeakMap},
		{work: a.weakmap, input: undefined, check: (o: any, i: any) => o.has(i) === false},
		{work: a.weakmap, input: null, check: (o: any) => o instanceof WeakMap},
		{work: a.weakmap, input: null, check: (o: any, i: any) => o.has(i) === false},
		{work: a.weakmap, input: 2, check: (o: any) => o instanceof WeakMap},
		{work: a.weakmap, input: 2, check: (o: any, i: any) => o.has(i) === false},
		{work: a.weakmap, input: [3], check: (o: any) => o instanceof WeakMap},
		{work: a.weakmap, input: [3], check: (o: any, i: any) => o.has(i[0]) === false},
		{work: a.weakmap, input: [[3, 3]], check: (o: any) => o instanceof WeakMap},
		{work: a.weakmap, input: [[3, 3]], check: (o: any, i: any) => o.has(i[0][0]) === false},
		{work: a.weakmap, input: [[{}, 3]], check: (o: any) => o instanceof WeakMap},
		{work: a.weakmap, input: [[{}, 3]], check: (o: any, i: any) => o.has(i[0][0])},
		{work: a.weakmap, input: new WeakMap, check: (o: any) => o instanceof WeakMap},
		{work: a.weakmap, input: new WeakMap, check: (o: any, i: any) => o === i},
	]
}, {
	name: 'set', tests: [
		{work: a.set, input: undefined, check: (o: any) => o instanceof Set},
		{work: a.set, input: undefined, check: (o: any) => o.size === 0},
		{work: a.set, input: null, check: (o: any) => o instanceof Set},
		{work: a.set, input: null, check: (o: any) => o.size === 0},
		{work: a.set, input: true, check: (o: any) => o instanceof Set},
		{work: a.set, input: true, check: (o: any) => o.size === 1},
		{work: a.set, input: 2, check: (o: any) => o instanceof Set},
		{work: a.set, input: 2, check: (o: any) => o.size === 1},
		{work: a.set, input: 2.5, check: (o: any) => o instanceof Set},
		{work: a.set, input: 2.5, check: (o: any) => o.size === 1},
		{work: a.set, input: '3', check: (o: any) => o instanceof Set},
		{work: a.set, input: '3', check: (o: any) => o.size === 1},
		{work: a.set, input: '3.5', check: (o: any) => o instanceof Set},
		{work: a.set, input: '3.5', check: (o: any) => o.size === 1},
		{work: a.set, input: 'abc', check: (o: any) => o instanceof Set},
		{work: a.set, input: 'abc', check: (o: any) => o.size === 1},
		{work: a.set, input: 4n, check: (o: any) => o instanceof Set},
		{work: a.set, input: 4n, check: (o: any) => o.size === 1},
		{work: a.set, input: Symbol.for('123'), check: (o: any) => o instanceof Set},
		{work: a.set, input: Symbol.for('123'), check: (o: any) => o.size === 1},
		{work: a.set, input: [], check: (o: any) => o instanceof Set},
		{work: a.set, input: [], check: (o: any) => o.size === 0},
		{work: a.set, input: ['5.5'], check: (o: any) => o instanceof Set},
		{work: a.set, input: ['5.5'], check: (o: any) => o.has('5.5')},
		{work: a.set, input: ['5.5', '6'], check: (o: any) => o instanceof Set},
		{work: a.set, input: ['5.5', '6'], check: (o: any) => o.has('6')},
		{work: a.set, input: {6: 6}, check: (o: any) => o instanceof Set},
		{work: a.set, input: {6: 6}, check: (o: any) => o.size === 1},
		{work: a.set, input: () => 7, check: (o: any) => o instanceof Set},
		{work: a.set, input: () => 7, check: (o: any) => o.size === 1},
		{work: a.set, input: new Date(8), check: (o: any) => o instanceof Set},
		{work: a.set, input: new Date(8), check: (o: any) => o.size === 1},
		{work: a.set, input: new Map, check: (o: any) => o instanceof Set},
		{work: a.set, input: new Map([[1, 'a'], [2, 'b']]), check: (o: any) => o.size === 2},
		{work: a.set, input: new WeakMap, check: (o: any) => o instanceof Set},
		{work: a.set, input: new WeakMap, check: (o: any) => o.size === 1},
		{work: a.set, input: new Set, check: (o: any) => o instanceof Set},
		{work: a.set, input: new Set([3, 4]), check: (o: any) => o.has(3)},
		{work: a.set, input: new WeakSet, check: (o: any) => o instanceof Set},
		{work: a.set, input: new WeakSet([Object, Number, String]), check: (o: any) => o.size === 1},
		{work: a.set, input: Promise.resolve(), check: (o: any) => o instanceof Set},
		{work: a.set, input: Promise.resolve(), check: (o: any) => o.size === 1},
	]
}, {
	name: 'weakset', tests: [
		{work: a.weakset, input: undefined, check: (o: any) => o instanceof WeakSet},
		{work: a.weakset, input: undefined, check: (o: any, i: any) => o.has(i) == false},
		{work: a.weakset, input: null, check: (o: any) => o instanceof WeakSet},
		{work: a.weakset, input: null, check: (o: any, i: any) => o.has(i) == false},
		{work: a.weakset, input: 2, check: (o: any) => o instanceof WeakSet},
		{work: a.weakset, input: 2, check: (o: any, i: any) => o.has(i) == false},
		{work: a.weakset, input: [{}], check: (o: any) => o instanceof WeakSet},
		{work: a.weakset, input: [{}], check: (o: any, i: any) => o.has(i[0])},
		{work: a.weakset, input: [3], check: (o: any) => o instanceof WeakSet},
		{work: a.weakset, input: [3], check: (o: any, i: any) => o.has(i[0]) == false},
		{work: a.weakset, input: new WeakSet, check: (o: any) => o instanceof WeakSet},
		{work: a.weakset, input: new WeakSet, check: (o: any, i: any) => (i === o)},
	]
}];

describe('alwz', () => {
	for (const {name, tests} of sets) {
		describe(name, () => {
			for (const index in tests) {
				const {work, input, check} = tests[index];
				// @ts-ignore
				test(`${index} - i:${String(input)}| t:${String(check)}`, () => expect(check(work(input), input)).toBe(true));
			}
		});
	}

	describe('aggregator', () => {
		const converter = new a.Converter((input) => typeof input === 'number' && input > 0, () => 1);
		converter
			.undefined(() => 1)
			.number((i) => {
				const result = Math.abs(i);
				return result > 0 ? result : converter.fallback();
			})
			.bigint((i) => converter.convert(Number(i)))
			.string((i) => converter.convert(Number(i)))
			.symbol((i) => converter.convert(Symbol.keyFor(i)))
			.register((i) => i instanceof Number, (i: any) => converter.convert(+i));

		a.aggregator.register('positive', converter);

		test(`custom convertor positive: -7`, () => {
			expect(a.to('positive')('-7')).toBe(7);
		});

		test(`custom convertor positive: 'abc'`, () => {
			expect(a.to('positive')('abc')).toBe(1);
		});
	});
});
